{"version":3,"sources":["components/menuItems.js","components/NavBar.js","components/BarChart.js","App.js","index.js"],"names":["menuItems","title","url","cName","NavBar","state","clicked","handleClick","setState","className","onClick","this","map","item","index","href","React","Component","Chart","props","changeData","newDataState","chartData","console","count","log","chartReference","ref","reference","data","width","height","options","maintainAspectRatio","App","getChartData","arrayToSort","i","nextNum","Math","floor","random","placeholder","swappedOnCurrentIter","newArray","UpdateBarChart","BubbleSort","currentArray","datasets","label","backgroundColor","labels","ResetToRandom","printArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c948593.chunk.js","sourcesContent":["export const menuItems = [\n    {\n        title: 'Home',\n        url:'#',\n        cName: \"nav-links\"\n    },\n    {\n        title: 'App',\n        url:'#',\n        cName: \"nav-links\"\n    },\n    {\n        title: 'Contact Us',\n        url:'#',\n        cName: \"nav-links\"\n    },\n\n]","import React from 'react';\nimport { menuItems } from './menuItems';\nimport './NavBar.css'\nclass NavBar extends React.Component{\n    state = {clicked: false}\n    handleClick = () => {\n        this.setState({clicked: !this.state.clicked})\n    }\n    render(){\n        return(\n            <nav className=\"NavBarItems\">\n                <h1 className=\"navbar-logo\">Sorting Algorithms Visually</h1>\n                <div className=\"menu-icon\" onClick={this.handleClick}>\n                    <i className={this.state.clicked ? 'fas fa-times': 'fas-fa-bars'}></i>\n                </div>\n                <ul className={this.state.clicked ? 'nav-menu active': 'nav-menu'}>\n                    {menuItems.map((item, index) => {\n                        return(\n                            <li key={index}>\n                                <a className={item.cName} href={item.url}>\n                                {item.title}\n                                </a>\n                            </li>\n                        )\n                    })}\n                    \n                </ul>\n            </nav>\n        )\n    }\n}\n\nexport default NavBar","import * as React from \"react\";\nimport { Component } from 'react';\nimport {Bar} from 'react-chartjs-2'\n\n\n\nclass Chart extends Component{\n    constructor(props){\n        super(props);\n        this.chartReference = React.createRef();\n        this.state = {\n            chartData: props.chartData\n        }\n    }\n    changeData = (newDataState) =>{\n        this.setState({chartData: newDataState});\n        console.count(\n            'The change Data has been ran:  ' \n          )\n        console.log(\"THIS IS RUN, HURRAY!\")\n        //this.chartReference.Chart.update();\n        //this.Chart.update();\n    }\n\n    render(){\n        return(\n            <div className=\"chart\">\n                <Bar\n                    ref = {(reference) => this.reference = reference}\n                    data={this.state.chartData}\n                    width={600}\n                    height={400}\n                    options={{ maintainAspectRatio: false }}\n                />\n\n            </div>\n        )\n    }\n}\nexport default Chart;\n\n\n// const Barchart = (ref, data, labels) => {\n//     //Try to take Data out of the Bar constructor   \n//     return(\n//         <div>\n//             <Bar\n//             data = {{\n//                 labels: labels, \n//                 datasets: [\n//                     {\n//                         label:'A randomly generated number entry',\n//                         data: data,\n//                         backgroundColor: 'purple'\n//                     },\n//                 ],\n//             }}\n//             height={400}\n//             width ={600}\n//             options={{\n//                 skipLabels : true,\n//                 maintainAspectRatio : false,\n//                 scales: {\n//                     yAxes: [\n//                         {\n//                         ticks: {\n//                             beginAtZero : true,\n//                         }, \n//                     }    \n//                 ],\n//             },\n//         }}\n//         />\n//         </div>\n//     )\n// }\n\n// const ReturnArrayToSort = () =>{\n//     return arrayToSort;\n// }\n// export default Barchart\n\n// var BSbutton = document.createElement(\"BSbutton\");\n// BSbutton.innerHTML = \"BubbleSort\";\n\n// // 2. Append somewhere\n// var body = document.getElementsByTagName(\"body\")[0];\n// body.appendChild(BSbutton);\n\n// // 3. Add event handler\n// BSbutton.addEventListener (\"click\", function() {\n//   alert(\"Running Bubble Sort\");\n//   BubbleSort(arrayToSort);\n// });","import './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar'\nimport Chart from './components/BarChart';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData : {}  \n    };\n  };\n\n  componentWillMount(){\n    this.getChartData();\n  }\n\n  ResetToRandom(){\n    let arrayToSort = [500];\n    for(let i=0; i<500; i++){\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n    return arrayToSort;\n  }\n\n BubbleSort(arrayToSort){\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n     for (let i=1; i<500; i++){\n         if(newArray[i-1]>newArray[i]){\n            placeholder = newArray[i-1];\n            newArray[i-1] = newArray[i];\n            newArray[i] = placeholder;\n            swappedOnCurrentIter = true; \n         }\n    }\n    if(swappedOnCurrentIter === true){\n      this.UpdateBarChart(newArray);\n      this.BubbleSort(newArray);\n    }\n    else{\n        return arrayToSort;\n    }\n  }\n\n  UpdateBarChart(currentArray){\n    console.log(\"Message\");\n    //this.state.chartData.datasets[0].data = currentArray; \n    this.setState({\n      chartData: {\n        datasets:[\n            {\n                label: \"Updated\",\n                data: currentArray\n            }\n        ],\n        backgroundColor: 'purple', \n    }\n    })\n    //this.changeData(this.state.chartData);\n    this.chartReference.changeData(this.state.chartData);\n\n  }\n\n  printArray(){\n    let array = [\"4\",\"5\",\"6\"];\n    return array;\n  }\n\n  getChartData(){\n    let labels = [500]\n    for(let i=0; i<500; i++){\n      labels[i] = '';\n    }\n    labels[0] = 'Lowest';\n    labels[495] = 'Highest';\n    let arrayToSort = this.ResetToRandom();\n    this.setState({\n      chartData: {\n        labels: labels, \n        datasets:[\n            {\n                label: \"Entries\",\n                data: arrayToSort\n            }\n        ],\n        backgroundColor: 'purple', \n    }\n    })\n\n    \n  }\n\n\n  chartReference = {};\n  componentDidMount() {\n    console.log(this.chartReference); // returns a Chart.js instance reference\n  }\n  \n  render(){\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Chart chartData = {this.state.chartData} ref={(reference) => this.chartReference = reference}/> \n        <textChange/>\n        <button onClick= {() => {this.BubbleSort(this.state.chartData.datasets[0].data)}}>BubbleSortCLick</button>\n        <h3>ChartData.data</h3> <p>{this.state.chartData.datasets[0].data}</p>\n        <h3>print array: </h3> <p>{this.printArray()}</p>\n        \n        \n      </div>\n    );\n    }\n  }\n  export default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}