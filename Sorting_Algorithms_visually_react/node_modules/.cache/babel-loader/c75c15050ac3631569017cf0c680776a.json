{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js\";\nimport * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.BubbleSort = passedArrayToSort => {\n      let arrayToSort = passedArrayToSort;\n      console.log(\"bubble: \", arrayToSort);\n      var swappedOnCurrentIter = false;\n      var placeholder;\n      let newArray = arrayToSort;\n\n      for (let i = 1; i < 500; i++) {\n        if (newArray[i - 1] > newArray[i]) {\n          placeholder = newArray[i - 1];\n          newArray[i - 1] = newArray[i];\n          newArray[i] = placeholder;\n          swappedOnCurrentIter = true;\n        }\n      }\n\n      if (swappedOnCurrentIter === true) {\n        this.UpdateBarChart(newArray);\n        setTimeout(() => {\n          console.log('Hello, World!');\n          this.BubbleSort(newArray);\n        }, 1);\n      } else {\n        return arrayToSort;\n      }\n    };\n\n    this.HeapSort = passedArrayToSort => {\n      var length_of_heap = 500;\n\n      for (let i = length_of_heap; i > 0; i--) {\n        let maxHeap = this.BuildMaxHeap(passedArrayToSort, i);\n        var heap = this.SwitchEndsOfHeap(maxHeap, i);\n      }\n\n      return heap;\n    };\n\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.state = {\n      arrayToSort: props.arrayToSort,\n      chartData: props.chartData\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    console.log(\"START\", arrayToSort);\n    return arrayToSort;\n  }\n\n  ResetOnclick() {\n    let newRandomArray = this.ResetToRandom();\n    this.UpdateBarChart(newRandomArray);\n  }\n\n  BuildMaxHeap(heap, length_of_heap) {\n    let swapped = true;\n    let maxHeap;\n\n    while (swapped) {\n      swapped = this.Heapify(this.state.arrayToSort, length_of_heap);\n    }\n\n    maxHeap = this.state.arrayToSort;\n    return maxHeap;\n  }\n\n  SwitchEndsOfHeap(heap, length_of_heap) {\n    let placeholder = heap[0];\n    heap[0] = heap[length_of_heap];\n    heap[length_of_heap] = placeholder;\n    this.UpdateBarChart(heap);\n    return heap;\n  }\n\n  Heapify(arrayToSort, lengthToSort) {\n    let heap = arrayToSort;\n    let lengthToUse = (lengthToSort - 1) / 2;\n    let currentParent;\n    let currentChildLeft;\n    let currentChildRight;\n    var swappedOnCurrentIter = false;\n\n    for (let i = 0; i < lengthToUse; i++) {\n      let x = 2 * i + 1;\n      let y = 2 * i + 2;\n      currentParent = heap[i];\n      currentChildLeft = heap[x];\n      currentChildRight = heap[y];\n\n      if (currentChildLeft > currentParent && currentChildLeft > currentChildRight) {\n        heap[i] = currentChildLeft;\n        heap[x] = currentParent;\n        console.log(\"Swapped\");\n        swappedOnCurrentIter = true;\n      } else if (currentChildRight > currentParent && currentChildRight >= currentChildLeft) {\n        heap[i] = currentChildRight;\n        heap[y] = currentParent;\n        console.log(\"Swapped\");\n        swappedOnCurrentIter = true;\n      }\n    }\n\n    this.UpdateBarChart(heap);\n    return swappedOnCurrentIter;\n  } // placeholderNode = heap[1];\n  // heap[1] = heap[lengthToSort];\n  // heap[lengthToSort] = placeholderNode;\n  // if(swappedOnCurrentIter == true){\n  //   let newLength = lengthToSort - 1;\n  //   this.UpdateBarChart(heap);\n  //   setTimeout(() => {\n  //   this.Heapify(heap, newLength);\n  //   }, 1);\n  // }\n  // else{\n  //   console.log('FINISHED');\n  //   return heap;\n  // }\n\n\n  UpdateBarChart(currentArray) {\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray);\n    this.setState({\n      arrayToSort: currentArray,\n      chartData: displayArray\n    });\n  }\n\n  getChartData() {\n    let arrayToSort = this.ResetToRandom();\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n    this.setState({\n      arrayToSort: arrayToSort,\n      chartData: displayArray\n    });\n  }\n\n  CreateDisplayArrayFromArrayToSort(arrayToSort) {\n    let placeholderArray = [];\n    let holdingArray = [500];\n    holdingArray[0] = ['0-500', 'Entry Value'];\n\n    for (let i = 1; i < 501; i++) {\n      placeholderArray[0] = i;\n      placeholderArray[1] = arrayToSort[i];\n      holdingArray[i] = placeholderArray;\n      placeholderArray = [];\n    }\n\n    return holdingArray;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-pretty-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.ResetOnclick();\n        },\n        children: \"Reset Data To Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        width: '1400px',\n        height: '500px',\n        chartType: \"Bar\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 23\n        }, this),\n        data: this.state.chartData,\n        options: {\n          // Material design options\n          chart: {\n            title: 'Randomized Data',\n            subtitle: 'Select a sort button to sort the data visually.' //backgroundColor: 'red',\n\n          },\n          colors: ['#7509b0']\n        } // For tests\n        ,\n        rootProps: {\n          'data-testid': '2'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.HeapSort(this.state.arrayToSort);\n        },\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Insert Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default GoogleChart;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js"],"names":["React","Chart","GoogleChart","Component","constructor","props","BubbleSort","passedArrayToSort","arrayToSort","console","log","swappedOnCurrentIter","placeholder","newArray","i","UpdateBarChart","setTimeout","HeapSort","length_of_heap","maxHeap","BuildMaxHeap","heap","SwitchEndsOfHeap","chartReference","createRef","state","chartData","UNSAFE_componentWillMount","getChartData","ResetToRandom","nextNum","Math","floor","random","ResetOnclick","newRandomArray","swapped","Heapify","lengthToSort","lengthToUse","currentParent","currentChildLeft","currentChildRight","x","y","currentArray","displayArray","CreateDisplayArrayFromArrayToSort","setState","placeholderArray","holdingArray","render","chart","title","subtitle","colors"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n\nclass GoogleChart extends React.Component{\n    constructor(props){\n        super(props);\n        this.chartReference = React.createRef();\n        this.state = {\n            arrayToSort: props.arrayToSort,\n            chartData: props.chartData\n        }\n\n    }\n    UNSAFE_componentWillMount(){\n        this.getChartData();\n      }\n    \n    ResetToRandom(){\n        let arrayToSort = [500];\n        for(let i=0; i<500; i++){\n          let nextNum = Math.floor(Math.random() * 1000);\n          arrayToSort[i] = nextNum;\n        }\n        console.log(\"START\", arrayToSort);\n        return arrayToSort;\n      }\n    \n    ResetOnclick(){\n        let newRandomArray = this.ResetToRandom();\n        this.UpdateBarChart(newRandomArray);\n    }\n    \n     BubbleSort = (passedArrayToSort) =>{\n        let arrayToSort = passedArrayToSort;\n        console.log(\"bubble: \", arrayToSort)\n        var swappedOnCurrentIter = false;\n        var placeholder;\n        let newArray = arrayToSort;\n    \n         for (let i=1; i<500; i++){\n             if(newArray[i-1]>newArray[i]){\n                placeholder = newArray[i-1];\n                newArray[i-1] = newArray[i];\n                newArray[i] = placeholder;\n                swappedOnCurrentIter = true; \n             }\n        }\n        if(swappedOnCurrentIter === true){\n          this.UpdateBarChart(newArray);\n          setTimeout(() => {\n            console.log('Hello, World!')\n            this.BubbleSort(newArray);\n          }, 1);\n          \n          \n        }\n        else{\n            return arrayToSort;\n        }\n      }\n\n      HeapSort = (passedArrayToSort) =>{\n        var length_of_heap = 500;\n        for(let i=length_of_heap; i>0; i--){\n          let maxHeap = this.BuildMaxHeap(passedArrayToSort, i);\n          var heap = this.SwitchEndsOfHeap(maxHeap, i);\n        }\n        return heap\n      }\n\n      BuildMaxHeap(heap, length_of_heap){\n        let swapped = true;\n        let maxHeap;\n        while(swapped){\n          swapped = this.Heapify(this.state.arrayToSort, length_of_heap)\n        }\n        maxHeap = this.state.arrayToSort\n        return maxHeap;\n      }\n\n      SwitchEndsOfHeap(heap, length_of_heap){\n        let placeholder = heap[0];\n        heap[0] = heap[length_of_heap];\n        heap[length_of_heap] = placeholder;\n        this.UpdateBarChart(heap);\n        return heap;\n      }\n      \n      Heapify(arrayToSort, lengthToSort){\n            let heap = arrayToSort;\n            let lengthToUse = (lengthToSort - 1)/2;\n            let currentParent;\n            let currentChildLeft;\n            let currentChildRight;\n            var swappedOnCurrentIter = false;\n\n              for (let i=0; i < lengthToUse; i++){\n                let x = 2*i+1;\n                let y = 2*i+2;\n                currentParent = heap[i];\n                    currentChildLeft = heap[x];\n                    currentChildRight = heap[y];\n    \n                    if(currentChildLeft > currentParent && currentChildLeft > currentChildRight){\n                      heap[i] = currentChildLeft;\n                      heap[x] = currentParent;\n                      console.log(\"Swapped\");\n                      swappedOnCurrentIter = true;\n                  }else if(currentChildRight > currentParent && currentChildRight >= currentChildLeft){\n                      heap[i] = currentChildRight;\n                      heap[y] = currentParent;\n                      console.log(\"Swapped\");\n                      swappedOnCurrentIter = true;\n                  }\n                }\n                this.UpdateBarChart(heap);\n                return swappedOnCurrentIter;\n            }\n           \n            \n\n\n            \n            // placeholderNode = heap[1];\n            // heap[1] = heap[lengthToSort];\n            // heap[lengthToSort] = placeholderNode;\n            // if(swappedOnCurrentIter == true){\n            //   let newLength = lengthToSort - 1;\n            //   this.UpdateBarChart(heap);\n            //   setTimeout(() => {\n            //   this.Heapify(heap, newLength);\n            //   }, 1);\n            // }\n            // else{\n            //   console.log('FINISHED');\n            //   return heap;\n            // }\n            \n      \n    \n\n\n      UpdateBarChart(currentArray){\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray); \n        this.setState({\n            arrayToSort : currentArray,\n            chartData: displayArray\n          })\n    }    \n    \n      getChartData(){\n        let arrayToSort = this.ResetToRandom();\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n        this.setState({ \n          arrayToSort: arrayToSort,\n          chartData: displayArray\n        })\n      }\n    \n      CreateDisplayArrayFromArrayToSort(arrayToSort){\n        let placeholderArray = [];\n        let holdingArray = [500];\n        holdingArray[0] = ['0-500','Entry Value'];\n        for(let i=1; i<501;i++ ){\n          placeholderArray[0] = i; \n          placeholderArray[1] = arrayToSort[i];\n        \n          holdingArray[i] = placeholderArray;\n          placeholderArray = [];\n        \n        }\n        return holdingArray;\n      }\n    \n    render() {\n        return (\n          <div className={\"my-pretty-chart-container\"}>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.ResetOnclick()}}>Reset Data To Random</button>\n            <Chart\n              width={'1400px'}\n              height={'500px'}\n              chartType=\"Bar\"\n              loader={<div>Loading Chart</div>}\n              data={\n                this.state.chartData\n              }\n              options={{\n                // Material design options\n                chart: {\n                  title: 'Randomized Data',\n                  subtitle: 'Select a sort button to sort the data visually.',\n                  //backgroundColor: 'red',\n                },\n                colors: ['#7509b0'],\n              }}\n              // For tests\n              rootProps={{ 'data-testid': '2' }}\n            />\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Bubble Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.HeapSort(this.state.arrayToSort)}}>Heap Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Quick Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Insert Sort</button>\n            \n          </div>\n        );\n      }\n}export default GoogleChart;"]},"metadata":{},"sourceType":"module"}