{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar';\nimport BarChart from './components/BarChart';\nimport Button from './components/Button';\nimport Chart from './components/BarChart';\nimport { render } from '@testing-library/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      chartData: {}\n    };\n  }\n\n  componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    return arrayToSort;\n  } // BubbleSortButton(){\n  //   var BSbutton = document.createElement(\"BSbutton\");\n  //   BSbutton.innerHTML = \"BubbleSort\";\n  // // 2. Append somewhere\n  //   var body = document.getElementsByTagName(\"body\")[0];\n  //   body.appendChild(BSbutton);\n  // // 3. Add event handler\n  //   BSbutton.addEventListener (\"click\", function() {\n  //       alert(\"Running Bubble Sort\");\n  //       this.BubbleSort(this.state.chartData.datasets.data);\n  //     });\n  //     return(BSbutton.innerHTML)\n  // }\n\n\n  BubbleSort(arrayToSort) {\n    // var swappedOnCurrentIter = false;\n    // var placeholder;\n    //  for (let i=1; i<500; i++){\n    //      if(arrayToSort[i-1]>arrayToSort[i]){\n    //         placeholder = arrayToSort[i-1];\n    //         arrayToSort[i-1] = arrayToSort[i];\n    //         arrayToSort[i] = placeholder;\n    //         swappedOnCurrentIter = true; \n    //      }\n    // }\n    // if(swappedOnCurrentIter == true){\n    //     this.UpdateBarChart(arrayToSort);\n    //     this.BubbleSort(arrayToSort);\n    // }\n    // else{\n    //     return arrayToSort;\n    // }\n    let newArray = arrayToSort;\n    newArray[0] = 1000;\n    this.UpdateBarChart(newArray);\n    return newArray;\n  }\n\n  UpdateBarChart(currentArray) {\n    this.state.chartData.datasets[0].data = currentArray;\n  }\n\n  printArray() {\n    let array = [\"1\", \"2\", \"3\"];\n    return array;\n  }\n\n  getChartData() {\n    let labels = [500];\n\n    for (let i = 0; i < 500; i++) {\n      labels[i] = '';\n    }\n\n    labels[0] = 'Lowest';\n    labels[495] = 'Highest';\n    let arrayToSort = this.ResetToRandom();\n    this.setState({\n      chartData: {\n        labels: labels,\n        datasets: [{\n          label: \"Entries\",\n          data: arrayToSort\n        }],\n        backgroundColor: 'purple'\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        chartData: this.state.chartData,\n        ref: reference => this.chartReference = reference\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"bubbleSortButton\",\n        onClick: () => this.BubbleSort(this.state.chartData.datasets[0].data),\n        children: \"BubbleSort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ChartData.data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.chartData.datasets[0].data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js"],"names":["React","Component","Navbar","BarChart","Button","Chart","render","App","constructor","state","chartData","componentWillMount","getChartData","ResetToRandom","arrayToSort","i","nextNum","Math","floor","random","BubbleSort","newArray","UpdateBarChart","currentArray","datasets","data","printArray","array","labels","setState","label","backgroundColor","reference","chartReference"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar'\nimport BarChart from './components/BarChart';\nimport Button from  './components/Button';\nimport Chart from './components/BarChart';\nimport { render } from '@testing-library/react';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData : {}  \n    };\n  };\n\n  componentWillMount(){\n    this.getChartData();\n  }\n\n  ResetToRandom(){\n    let arrayToSort = [500];\n    for(let i=0; i<500; i++){\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n    return arrayToSort;\n  }\n  // BubbleSortButton(){\n  //   var BSbutton = document.createElement(\"BSbutton\");\n  //   BSbutton.innerHTML = \"BubbleSort\";\n\n  // // 2. Append somewhere\n  //   var body = document.getElementsByTagName(\"body\")[0];\n  //   body.appendChild(BSbutton);\n\n  // // 3. Add event handler\n  //   BSbutton.addEventListener (\"click\", function() {\n  //       alert(\"Running Bubble Sort\");\n  //       this.BubbleSort(this.state.chartData.datasets.data);\n  //     });\n  //     return(BSbutton.innerHTML)\n  // }\n  \n\n BubbleSort(arrayToSort){\n    // var swappedOnCurrentIter = false;\n    // var placeholder;\n\n    //  for (let i=1; i<500; i++){\n    //      if(arrayToSort[i-1]>arrayToSort[i]){\n    //         placeholder = arrayToSort[i-1];\n    //         arrayToSort[i-1] = arrayToSort[i];\n    //         arrayToSort[i] = placeholder;\n    //         swappedOnCurrentIter = true; \n    //      }\n    // }\n    // if(swappedOnCurrentIter == true){\n    //     this.UpdateBarChart(arrayToSort);\n    //     this.BubbleSort(arrayToSort);\n    // }\n    // else{\n    //     return arrayToSort;\n    // }\n    let newArray = arrayToSort;\n    newArray[0] = 1000;\n    this.UpdateBarChart(newArray);\n    return newArray;\n  }\n  UpdateBarChart(currentArray){\n    this.state.chartData.datasets[0].data = currentArray; \n  }\n  printArray(){\n    let array = [\"1\",\"2\",\"3\"];\n    return array;\n  }\n\n  getChartData(){\n    let labels = [500]\n    for(let i=0; i<500; i++){\n      labels[i] = '';\n    }\n    labels[0] = 'Lowest';\n    labels[495] = 'Highest';\n    let arrayToSort = this.ResetToRandom();\n    this.setState({\n      chartData: {\n        labels: labels, \n        datasets:[\n            {\n                label: \"Entries\",\n                data: arrayToSort\n            }\n        ],\n        backgroundColor: 'purple', \n    }\n    })\n\n    \n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Chart chartData = {this.state.chartData} ref={(reference) => this.chartReference = reference}/> \n        <button id=\"bubbleSortButton\" onClick={()=>this.BubbleSort(this.state.chartData.datasets[0].data)}>BubbleSort</button>\n        <h3>ChartData.data</h3> <p>{this.state.chartData.datasets[0].data}</p>\n      </div>\n    );\n    }\n  }\n  export default App;\n\n\n"]},"metadata":{},"sourceType":"module"}