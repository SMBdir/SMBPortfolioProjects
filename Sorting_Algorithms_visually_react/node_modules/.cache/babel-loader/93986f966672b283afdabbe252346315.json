{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js\";\nimport * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeData = newDataState => {\n      this.myGoogleChart.setState({\n        changeData: newDataState\n      });\n      this.setState({\n        changeData: newDataState\n      });\n    };\n\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.state = {\n      arrayToSort: props.arrayToSort,\n      chartData: props.chartData\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    return arrayToSort;\n  }\n\n  BubbleSort(passedArrayToSort) {\n    let arrayToSort = passedArrayToSort;\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n    for (let i = 1; i < 500; i++) {\n      if (newArray[i - 1] > newArray[i]) {\n        placeholder = newArray[i - 1];\n        newArray[i - 1] = newArray[i];\n        newArray[i] = placeholder;\n        swappedOnCurrentIter = true;\n      }\n    }\n\n    if (swappedOnCurrentIter === true) {\n      this.setState({\n        arrayToSort: newArray,\n        chartData: displayArray\n      }, this.UpdateBarChart(newArray), this.BubbleSort(newArray));\n    } else {\n      return arrayToSort;\n    }\n  }\n\n  timeout(ms) {\n    //pass a time in milliseconds to this function\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  UpdateBarChart(currentArray) {\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray);\n  }\n\n  printArray() {\n    let data = [['Year', 'Sales', 'Expenses', 'Profit'], ['2014', 1000, 400, 200], ['2015', 1170, 460, 250], ['2016', 660, 1120, 300], ['2017', 1030, 540, 350]];\n    return data;\n  }\n\n  getChartData() {\n    let arrayToSort = this.ResetToRandom();\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n    this.setState({\n      arrayToSort: arrayToSort,\n      chartData: displayArray\n    });\n  }\n\n  CreateDisplayArrayFromArrayToSort(arrayToSort) {\n    let placeholderArray = [];\n    let holdingArray = [500];\n    holdingArray[0] = ['0-500', 'Entry Value'];\n\n    for (let i = 1; i < 501; i++) {\n      placeholderArray[0] = i;\n      placeholderArray[1] = arrayToSort[i];\n      holdingArray[i] = placeholderArray;\n      placeholderArray = [];\n    }\n\n    return holdingArray;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-pretty-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        width: '800px',\n        height: '400px',\n        chartType: \"Bar\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 23\n        }, this),\n        data: this.state.chartData,\n        options: {\n          // Material design options\n          chart: {\n            title: 'Company Performance',\n            subtitle: 'Sales, Expenses, and Profit: 2014-2017'\n          }\n        } // For tests\n        ,\n        rootProps: {\n          'data-testid': '2'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"BubbleSortCLick\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default GoogleChart;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js"],"names":["React","Chart","GoogleChart","Component","constructor","props","changeData","newDataState","myGoogleChart","setState","chartReference","createRef","state","arrayToSort","chartData","UNSAFE_componentWillMount","getChartData","ResetToRandom","i","nextNum","Math","floor","random","BubbleSort","passedArrayToSort","swappedOnCurrentIter","placeholder","newArray","displayArray","UpdateBarChart","timeout","ms","Promise","resolve","setTimeout","currentArray","CreateDisplayArrayFromArrayToSort","printArray","data","placeholderArray","holdingArray","render","chart","title","subtitle"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n\nclass GoogleChart extends React.Component{\n    constructor(props){\n        super(props);\n        this.chartReference = React.createRef();\n        this.state = {\n            arrayToSort: props.arrayToSort,\n            chartData: props.chartData\n        }\n\n    }\n    UNSAFE_componentWillMount(){\n        this.getChartData();\n      }\n    \n    ResetToRandom(){\n        let arrayToSort = [500];\n        for(let i=0; i<500; i++){\n          let nextNum = Math.floor(Math.random() * 1000);\n          arrayToSort[i] = nextNum;\n        }\n        return arrayToSort;\n      }\n    \n     BubbleSort(passedArrayToSort){\n        let arrayToSort = passedArrayToSort\n        var swappedOnCurrentIter = false;\n        var placeholder;\n        let newArray = arrayToSort;\n    \n         for (let i=1; i<500; i++){\n             if(newArray[i-1]>newArray[i]){\n                placeholder = newArray[i-1];\n                newArray[i-1] = newArray[i];\n                newArray[i] = placeholder;\n                swappedOnCurrentIter = true; \n             }\n        }\n        if(swappedOnCurrentIter === true){\n            this.setState({\n                arrayToSort : newArray,\n                chartData: displayArray\n              },this.UpdateBarChart(newArray),\n              this.BubbleSort(newArray))\n        }\n        else{\n            return arrayToSort;\n        }\n      }\n\n      timeout(ms) { //pass a time in milliseconds to this function\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n      UpdateBarChart(currentArray){\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray); \n        }\n    \n      printArray(){\n        let data=[\n          ['Year', 'Sales', 'Expenses', 'Profit'],\n          ['2014', 1000, 400, 200],\n          ['2015', 1170, 460, 250],\n          ['2016', 660, 1120, 300],\n          ['2017', 1030, 540, 350],\n        ];\n        return data;\n      }\n    \n      getChartData(){\n        let arrayToSort = this.ResetToRandom();\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n        this.setState({ \n          arrayToSort: arrayToSort,\n          chartData: displayArray\n        })\n      }\n    \n      CreateDisplayArrayFromArrayToSort(arrayToSort){\n        let placeholderArray = [];\n        let holdingArray = [500];\n        holdingArray[0] = ['0-500','Entry Value'];\n        for(let i=1; i<501;i++ ){\n          placeholderArray[0] = i; \n          placeholderArray[1] = arrayToSort[i];\n          holdingArray[i] = placeholderArray;\n          placeholderArray = [];\n        \n        }\n        return holdingArray;\n      }\n\n    changeData = (newDataState) => {\n        this.myGoogleChart.setState({\n            changeData: newDataState\n        })\n        this.setState({\n            changeData: newDataState\n        })\n    }\n    \n    render() {\n        return (\n          <div className={\"my-pretty-chart-container\"}>\n            <h1>{this.state.chartData}</h1>\n            <Chart\n              width={'800px'}\n              height={'400px'}\n              chartType=\"Bar\"\n              loader={<div>Loading Chart</div>}\n              data={\n                this.state.chartData\n              }\n              options={{\n                // Material design options\n                chart: {\n                  title: 'Company Performance',\n                  subtitle: 'Sales, Expenses, and Profit: 2014-2017',\n                },\n              }}\n              // For tests\n              rootProps={{ 'data-testid': '2' }}\n            />\n            <button onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>BubbleSortCLick</button>\n          </div>\n        );\n      }\n}export default GoogleChart;"]},"metadata":{},"sourceType":"module"}