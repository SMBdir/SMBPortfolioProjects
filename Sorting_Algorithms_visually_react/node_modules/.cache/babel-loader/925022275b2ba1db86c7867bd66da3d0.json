{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React from 'react';\nimport Navbar from './components/NavBar';\nimport BarChart from './components/BarChart';\nimport Button from './components/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const ref = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      ref: ref,\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\n_c = App;\n\nfunction CreateRandomArray() {\n  let arrayToSort = [500];\n  let labels = [500];\n\n  for (let i = 0; i < 500; i++) {\n    let nextNum = Math.floor(Math.random() * 1000);\n    arrayToSort[i] = nextNum;\n    labels[i] = '';\n  }\n\n  labels[0] = 'Lowest';\n  labels[495] = 'Highest';\n  return arrayToSort;\n}\n\n_c2 = CreateRandomArray;\nexport const UpdateBarChart = arrayToSort => {\n  console.log('C1 DATA : ');\n  console.log(c1.data);\n  c1.data.datasets[0].data = arrayToSort;\n  c1.update();\n  return c1;\n};\n_c3 = UpdateBarChart;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"CreateRandomArray\");\n$RefreshReg$(_c3, \"UpdateBarChart\");","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js"],"names":["React","Navbar","BarChart","Button","App","ref","useRef","data","options","CreateRandomArray","arrayToSort","labels","i","nextNum","Math","floor","random","UpdateBarChart","console","log","c1","datasets","update"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,MAAP,MAAoB,qBAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,GAAG,GAAGC,MAAM,EAAlB;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,GAAG,EAAED,GAAf;AAAoB,MAAA,IAAI,EAAEE,IAA1B;AAAgC,MAAA,OAAO,EAAEC;AAAzC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAXQJ,G;;KAAAA,G;;AAaT,SAASK,iBAAT,GAA4B;AAC1B,MAAIC,WAAW,GAAG,CAAC,GAAD,CAAlB;AACA,MAAIC,MAAM,GAAG,CAAC,GAAD,CAAb;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,GAAf,EAAoBA,CAAC,EAArB,EAAwB;AACpB,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAAd;AACAN,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBC,OAAjB;AACAF,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAY,EAAZ;AACH;;AACDD,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,QAAZ;AACAA,EAAAA,MAAM,CAAC,GAAD,CAAN,GAAc,SAAd;AACA,SAAOD,WAAP;AACD;;MAXQD,iB;AAiBT,OAAO,MAAMQ,cAAc,GAAIP,WAAD,IAAiB;AAC7CQ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,EAAE,CAACb,IAAf;AACAa,EAAAA,EAAE,CAACb,IAAH,CAAQc,QAAR,CAAiB,CAAjB,EAAoBd,IAApB,GAA0BG,WAA1B;AACAU,EAAAA,EAAE,CAACE,MAAH;AACA,SAAOF,EAAP;AACD,CANM;MAAMH,c;AAOb,eAAeb,GAAf","sourcesContent":["import './App.css';\nimport React from 'react';\nimport Navbar from './components/NavBar'\nimport BarChart from './components/BarChart';\nimport Button from  './components/Button';\n\nfunction App() {\n  const ref = useRef();\n  return (\n    <div className=\"App\">\n      \n      <Navbar />\n      <BarChart ref={ref} data={data} options={options} />\n      \n\n    </div>\n  );\n}\n\nfunction CreateRandomArray(){\n  let arrayToSort = [500];\n  let labels = [500]\n  for(let i=0; i<500; i++){\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n      labels[i] = '';\n  }\n  labels[0] = 'Lowest';\n  labels[495] = 'Highest';\n  return arrayToSort;\n}\n\n\n\n\n\nexport const UpdateBarChart = (arrayToSort) => {\n  console.log('C1 DATA : ')\n  console.log(c1.data);\n  c1.data.datasets[0].data= arrayToSort;\n  c1.update();\n  return c1;\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}