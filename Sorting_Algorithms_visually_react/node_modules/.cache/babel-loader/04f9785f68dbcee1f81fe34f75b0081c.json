{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar';\nimport BarChart from './components/BarChart';\nimport Chart from './components/BarChart';\nimport { render } from '@testing-library/react';\nimport textChange from './components/textChange';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      chartData: {}\n    };\n  }\n\n  componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    return arrayToSort;\n  }\n\n  BubbleSort(arrayToSort) {\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n    for (let i = 1; i < 500; i++) {\n      if (newArray[i - 1] > newArray[i]) {\n        placeholder = newArray[i - 1];\n        newArray[i - 1] = newArray[i];\n        newArray[i] = placeholder;\n        swappedOnCurrentIter = true;\n      }\n    }\n\n    if (swappedOnCurrentIter == true) {\n      this.state.chartData.datasets[0].data = newArray;\n      this.BubbleSort(newArray);\n      this.UpdateBarChart(newArray); // this.chartReference.chartInstance.update();\n    } else {\n      return arrayToSort;\n    }\n  }\n\n  UpdateBarChart(currentArray) {\n    this.state.chartData.datasets[0].data = currentArray;\n    this.setState(this.state.chartData);\n    this.chartReference.changeData(this.state.chartData);\n    this.chartReference.componentDidUpdate();\n    ref.ChartInstance.update(); //this.Chart.changeData(this.state.chartData);\n  }\n\n  printArray() {\n    let array = [\"4\", \"5\", \"6\"];\n    return array;\n  }\n\n  getChartData() {\n    let labels = [500];\n\n    for (let i = 0; i < 500; i++) {\n      labels[i] = '';\n    }\n\n    labels[0] = 'Lowest';\n    labels[495] = 'Highest';\n    let arrayToSort = this.ResetToRandom();\n    this.setState({\n      chartData: {\n        labels: labels,\n        datasets: [{\n          label: \"Entries\",\n          data: arrayToSort\n        }],\n        backgroundColor: 'purple'\n      }\n    });\n  }\n\n  render() {\n    var printArrayToRender = \"123\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        chartData: this.state.chartData,\n        ref: reference => this.chartReference = reference\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textChange\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.BubbleSort(this.state.chartData.datasets[0].data);\n        },\n        children: \"BubbleSortCLick\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          printArrayToRender = this.printArray();\n        },\n        children: \"printArray\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ChartData.data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.chartData.datasets[0].data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"print array: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: printArrayToRender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js"],"names":["React","Component","Navbar","BarChart","Chart","render","textChange","App","constructor","state","chartData","componentWillMount","getChartData","ResetToRandom","arrayToSort","i","nextNum","Math","floor","random","BubbleSort","swappedOnCurrentIter","placeholder","newArray","datasets","data","UpdateBarChart","currentArray","setState","chartReference","changeData","componentDidUpdate","ref","ChartInstance","update","printArray","array","labels","label","backgroundColor","printArrayToRender","reference"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar'\nimport BarChart from './components/BarChart';\n\nimport Chart from './components/BarChart';\nimport { render } from '@testing-library/react';\nimport textChange from './components/textChange';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData : {}  \n    };\n  };\n\n  componentWillMount(){\n    this.getChartData();\n  }\n\n  ResetToRandom(){\n    let arrayToSort = [500];\n    for(let i=0; i<500; i++){\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n    return arrayToSort;\n  }\n\n BubbleSort(arrayToSort){\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n     for (let i=1; i<500; i++){\n         if(newArray[i-1]>newArray[i]){\n            placeholder = newArray[i-1];\n            newArray[i-1] = newArray[i];\n            newArray[i] = placeholder;\n            swappedOnCurrentIter = true; \n         }\n    }\n    if(swappedOnCurrentIter == true){\n      this.state.chartData.datasets[0].data = newArray;\n      this.BubbleSort(newArray);\n      this.UpdateBarChart(newArray);\n      // this.chartReference.chartInstance.update();\n    }\n    else{\n        return arrayToSort;\n    }\n  }\n\n  UpdateBarChart(currentArray){\n    this.state.chartData.datasets[0].data = currentArray; \n    this.setState(this.state.chartData);\n    this.chartReference.changeData(this.state.chartData);\n    this.chartReference.componentDidUpdate();\n    ref.ChartInstance.update();\n    //this.Chart.changeData(this.state.chartData);\n  }\n\n  printArray(){\n    let array = [\"4\",\"5\",\"6\"];\n    return array;\n  }\n\n  getChartData(){\n    let labels = [500]\n    for(let i=0; i<500; i++){\n      labels[i] = '';\n    }\n    labels[0] = 'Lowest';\n    labels[495] = 'Highest';\n    let arrayToSort = this.ResetToRandom();\n    this.setState({\n      chartData: {\n        labels: labels, \n        datasets:[\n            {\n                label: \"Entries\",\n                data: arrayToSort\n            }\n        ],\n        backgroundColor: 'purple', \n    }\n    })\n\n    \n  }\n  \n  render(){\n    var printArrayToRender = \"123\";\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Chart chartData = {this.state.chartData} ref={(reference) => this.chartReference = reference}/> \n        <textChange/>\n        <button onClick= {() => {this.BubbleSort(this.state.chartData.datasets[0].data)}}>BubbleSortCLick</button>\n        <button onClick= {() => {printArrayToRender = this.printArray()}}>printArray</button>\n        <h3>ChartData.data</h3> <p>{this.state.chartData.datasets[0].data}</p>\n        <h3>print array: </h3> <p>{printArrayToRender}</p>\n        \n      </div>\n    );\n    }\n  }\n  export default App;\n\n\n"]},"metadata":{},"sourceType":"module"}