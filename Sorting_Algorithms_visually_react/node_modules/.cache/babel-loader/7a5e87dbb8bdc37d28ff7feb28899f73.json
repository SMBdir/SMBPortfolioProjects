{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js\";\nimport * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.BubbleSort = passedArrayToSort => {\n      let arrayToSort = passedArrayToSort;\n      console.log(\"bubble: \", arrayToSort);\n      var swappedOnCurrentIter = false;\n      var placeholder;\n      let newArray = arrayToSort;\n\n      for (let i = 1; i < 500; i++) {\n        if (newArray[i - 1] > newArray[i]) {\n          placeholder = newArray[i - 1];\n          newArray[i - 1] = newArray[i];\n          newArray[i] = placeholder;\n          swappedOnCurrentIter = true;\n        }\n      }\n\n      if (swappedOnCurrentIter === true) {\n        this.UpdateBarChart(newArray);\n        setTimeout(() => {\n          console.log('Hello, World!');\n          this.BubbleSort(newArray);\n        }, 1);\n      } else {\n        return arrayToSort;\n      }\n    };\n\n    this.BuildArrayFromHeap = heap => {};\n\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.state = {\n      arrayToSort: props.arrayToSort,\n      chartData: props.chartData\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    console.log(\"START\", arrayToSort);\n    return arrayToSort;\n  }\n\n  ResetOnclick() {\n    let newRandomArray = this.ResetToRandom();\n    this.UpdateBarChart(newRandomArray);\n  }\n\n  Heapify(arrayToSort, lengthToSort) {\n    console.log(\"HEAPify: \", arrayToSort);\n    let heap = arrayToSort;\n    let lengthToUse = (lengthToSort - 1) / 2;\n    let currentParent;\n    let currentChildLeft;\n    let currentChildRight;\n    var swappedOnCurrentIter = false;\n    let placeholderNode;\n\n    for (let i = 0; i < lengthToUse; i++) {\n      let x = 2 * i + 1;\n      let y = 2 * i + 2;\n      console.log(i, x, y);\n      currentParent = heap[i];\n      currentChildLeft = heap[x];\n      currentChildRight = heap[y];\n      console.log(\"Parent\", currentParent);\n      console.log(\"left\", currentChildLeft);\n      console.log(\"right\", currentChildRight);\n      console.log(heap);\n\n      if (currentChildLeft > currentParent && currentChildLeft > currentChildRight) {\n        heap[i] = currentChildLeft;\n        heap[x] = currentParent;\n        console.log(\"swapped parent\", heap[i], \"with\", heap[x]);\n        swappedOnCurrentIter = true;\n      } else if (currentChildRight > currentParent && currentChildRight >= currentChildLeft) {\n        heap[i] = currentChildLeft;\n        heap[y] = currentParent;\n        console.log(\"swapped parent\", heap[i], \"with\", heap[y]);\n        swappedOnCurrentIter = true;\n      }\n    }\n\n    this.UpdateBarChart(heap);\n  } // placeholderNode = heap[1];\n  // heap[1] = heap[lengthToSort];\n  // heap[lengthToSort] = placeholderNode;\n  // if(swappedOnCurrentIter == true){\n  //   let newLength = lengthToSort - 1;\n  //   this.UpdateBarChart(heap);\n  //   setTimeout(() => {\n  //   this.Heapify(heap, newLength);\n  //   }, 1);\n  // }\n  // else{\n  //   console.log('FINISHED');\n  //   return heap;\n  // }\n\n\n  UpdateBarChart(currentArray) {\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray);\n    this.setState({\n      arrayToSort: currentArray,\n      chartData: displayArray\n    });\n  }\n\n  getChartData() {\n    let arrayToSort = this.ResetToRandom();\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n    this.setState({\n      arrayToSort: arrayToSort,\n      chartData: displayArray\n    });\n  }\n\n  CreateDisplayArrayFromArrayToSort(arrayToSort) {\n    let placeholderArray = [];\n    let holdingArray = [500];\n    holdingArray[0] = ['0-500', 'Entry Value'];\n\n    for (let i = 1; i < 501; i++) {\n      placeholderArray[0] = i;\n      placeholderArray[1] = arrayToSort[i];\n      holdingArray[i] = placeholderArray;\n      placeholderArray = [];\n    }\n\n    return holdingArray;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-pretty-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.arrayToSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.ResetOnclick();\n        },\n        children: \"Reset Data To Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        width: '1400px',\n        height: '500px',\n        chartType: \"Bar\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 23\n        }, this),\n        data: this.state.chartData,\n        options: {\n          // Material design options\n          chart: {\n            title: 'Randomized Data',\n            subtitle: 'Select a sort button to sort the data visually.' //backgroundColor: 'red',\n\n          },\n          colors: ['#7509b0']\n        } // For tests\n        ,\n        rootProps: {\n          'data-testid': '2'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.Heapify(this.state.arrayToSort, 500);\n        },\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Insert Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default GoogleChart;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js"],"names":["React","Chart","GoogleChart","Component","constructor","props","BubbleSort","passedArrayToSort","arrayToSort","console","log","swappedOnCurrentIter","placeholder","newArray","i","UpdateBarChart","setTimeout","BuildArrayFromHeap","heap","chartReference","createRef","state","chartData","UNSAFE_componentWillMount","getChartData","ResetToRandom","nextNum","Math","floor","random","ResetOnclick","newRandomArray","Heapify","lengthToSort","lengthToUse","currentParent","currentChildLeft","currentChildRight","placeholderNode","x","y","currentArray","displayArray","CreateDisplayArrayFromArrayToSort","setState","placeholderArray","holdingArray","render","chart","title","subtitle","colors"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n\nclass GoogleChart extends React.Component{\n    constructor(props){\n        super(props);\n        this.chartReference = React.createRef();\n        this.state = {\n            arrayToSort: props.arrayToSort,\n            chartData: props.chartData\n        }\n\n    }\n    UNSAFE_componentWillMount(){\n        this.getChartData();\n      }\n    \n    ResetToRandom(){\n        let arrayToSort = [500];\n        for(let i=0; i<500; i++){\n          let nextNum = Math.floor(Math.random() * 1000);\n          arrayToSort[i] = nextNum;\n        }\n        console.log(\"START\", arrayToSort);\n        return arrayToSort;\n      }\n    \n    ResetOnclick(){\n        let newRandomArray = this.ResetToRandom();\n        this.UpdateBarChart(newRandomArray);\n    }\n    \n     BubbleSort = (passedArrayToSort) =>{\n        let arrayToSort = passedArrayToSort;\n        console.log(\"bubble: \", arrayToSort)\n        var swappedOnCurrentIter = false;\n        var placeholder;\n        let newArray = arrayToSort;\n    \n         for (let i=1; i<500; i++){\n             if(newArray[i-1]>newArray[i]){\n                placeholder = newArray[i-1];\n                newArray[i-1] = newArray[i];\n                newArray[i] = placeholder;\n                swappedOnCurrentIter = true; \n             }\n        }\n        if(swappedOnCurrentIter === true){\n          this.UpdateBarChart(newArray);\n          setTimeout(() => {\n            console.log('Hello, World!')\n            this.BubbleSort(newArray);\n          }, 1);\n          \n          \n        }\n        else{\n            return arrayToSort;\n        }\n      }\n\n      // HeapSort = (passedArrayToSort) =>{\n      //   console.log(\"HEAPSORT: \",passedArrayToSort);\n      //   var length_of_heap = 500;\n      //   let sortedHeap = this.Heapify(passedArrayToSort, length_of_heap);\n      //   return sortedHeap\n      // }\n\n      BuildArrayFromHeap = (heap) =>{\n        \n      }\n      Heapify(arrayToSort, lengthToSort){\n            console.log(\"HEAPify: \",arrayToSort);\n            let heap = arrayToSort;\n            let lengthToUse = (lengthToSort - 1)/2;\n            let currentParent;\n            let currentChildLeft;\n            let currentChildRight;\n            var swappedOnCurrentIter = false;\n            let placeholderNode;\n\n              for (let i=0; i < lengthToUse; i++){\n\n                let x = 2*i+1;\n                let y = 2*i+2;\n                console.log(i, x, y);\n                currentParent = heap[i];\n                    currentChildLeft = heap[x];\n                    currentChildRight = heap[y];\n                    console.log(\"Parent\", currentParent);\n                    console.log(\"left\", currentChildLeft);\n                    console.log(\"right\", currentChildRight);\n                    console.log(heap);\n                    if(currentChildLeft > currentParent && currentChildLeft > currentChildRight){\n                      heap[i] = currentChildLeft;\n                      heap[x] = currentParent;\n                      console.log(\"swapped parent\", heap[i], \"with\", heap[x]);\n                      swappedOnCurrentIter = true;\n                  }else if(currentChildRight > currentParent && currentChildRight >= currentChildLeft){\n                      heap[i] = currentChildLeft;\n                      heap[y] = currentParent;\n                      console.log(\"swapped parent\", heap[i], \"with\", heap[y]);\n                      swappedOnCurrentIter = true;\n                  }\n                }\n                this.UpdateBarChart(heap);\n            }\n           \n            \n\n\n            \n            // placeholderNode = heap[1];\n            // heap[1] = heap[lengthToSort];\n            // heap[lengthToSort] = placeholderNode;\n            // if(swappedOnCurrentIter == true){\n            //   let newLength = lengthToSort - 1;\n            //   this.UpdateBarChart(heap);\n            //   setTimeout(() => {\n            //   this.Heapify(heap, newLength);\n            //   }, 1);\n            // }\n            // else{\n            //   console.log('FINISHED');\n            //   return heap;\n            // }\n            \n      \n    \n\n\n      UpdateBarChart(currentArray){\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray); \n        this.setState({\n            arrayToSort : currentArray,\n            chartData: displayArray\n          })\n    }    \n    \n      getChartData(){\n        let arrayToSort = this.ResetToRandom();\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n        this.setState({ \n          arrayToSort: arrayToSort,\n          chartData: displayArray\n        })\n      }\n    \n      CreateDisplayArrayFromArrayToSort(arrayToSort){\n        let placeholderArray = [];\n        let holdingArray = [500];\n        holdingArray[0] = ['0-500','Entry Value'];\n        for(let i=1; i<501;i++ ){\n          placeholderArray[0] = i; \n          placeholderArray[1] = arrayToSort[i];\n        \n          holdingArray[i] = placeholderArray;\n          placeholderArray = [];\n        \n        }\n        return holdingArray;\n      }\n    \n    render() {\n        return (\n          <div className={\"my-pretty-chart-container\"}>\n            <p>{this.state.arrayToSort}</p>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.ResetOnclick()}}>Reset Data To Random</button>\n            <Chart\n              width={'1400px'}\n              height={'500px'}\n              chartType=\"Bar\"\n              loader={<div>Loading Chart</div>}\n              data={\n                this.state.chartData\n              }\n              options={{\n                // Material design options\n                chart: {\n                  title: 'Randomized Data',\n                  subtitle: 'Select a sort button to sort the data visually.',\n                  //backgroundColor: 'red',\n                },\n                colors: ['#7509b0'],\n              }}\n              // For tests\n              rootProps={{ 'data-testid': '2' }}\n            />\n            \n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Bubble Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.Heapify(this.state.arrayToSort, 500)}}>Heap Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Quick Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Insert Sort</button>\n            \n          </div>\n        );\n      }\n}export default GoogleChart;"]},"metadata":{},"sourceType":"module"}