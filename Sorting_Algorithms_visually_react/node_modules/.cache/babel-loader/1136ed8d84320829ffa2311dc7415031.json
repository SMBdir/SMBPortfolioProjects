{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar';\nimport Chart from './components/BarChart';\nimport GoogleChart from './components/GoogleChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      chartData: {}\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    return arrayToSort;\n  }\n\n  BubbleSort(arrayToSort) {\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n    for (let i = 1; i < 500; i++) {\n      if (newArray[i - 1] > newArray[i]) {\n        placeholder = newArray[i - 1];\n        newArray[i - 1] = newArray[i];\n        newArray[i] = placeholder;\n        swappedOnCurrentIter = true;\n      }\n    }\n\n    if (swappedOnCurrentIter === true) {\n      this.UpdateBarChart(newArray);\n      this.BubbleSort(newArray);\n    } else {\n      return arrayToSort;\n    }\n  }\n\n  UpdateBarChart(currentArray) {\n    //this.state.chartData.datasets[0].data = currentArray; \n    this.setState({\n      chartData: {\n        labels: this.state.chartData.labels,\n        datasets: [{\n          label: \"Updated\",\n          data: currentArray\n        }],\n        backgroundColor: 'purple'\n      }\n    }); //console.log(\"App State Data: \"+ this.state.chartData.datasets[0].data);\n    //this.changeData(this.state.chartData);\n\n    this.chartReference.changeData(this.state.chartData); //this.chartReference.chartInstance.update();\n  }\n\n  printArray() {\n    data = [['Year', 'Sales', 'Expenses', 'Profit'], ['2014', 1000, 400, 200], ['2015', 1170, 460, 250], ['2016', 660, 1120, 300], ['2017', 1030, 540, 350]];\n    return data;\n  }\n\n  getChartData() {\n    let arrayToSort = this.ResetToRandom();\n    let placeholderArray = [];\n    let holdingArray = [500];\n    holdingArray[0] = ['Entries', 'Columns'];\n\n    for (let i = 1; i < 501; i++) {\n      placeholderArray[0] = \"e\";\n      placeholderArray[1] = arrayToSort[i];\n      holdingArray[i] = placeholderArray;\n      placeholderArray = [];\n    }\n\n    console.log(\"Holding array: \", holdingArray);\n    this.setState({\n      chartData: holdingArray\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleChart, {\n        chartData: this.state.chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.BubbleSort(this.state.chartData.datasets[0].data);\n        },\n        children: \"BubbleSortCLick\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ChartData.data: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 35\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Actual Data: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js"],"names":["React","Component","Navbar","Chart","GoogleChart","App","constructor","state","chartData","UNSAFE_componentWillMount","getChartData","ResetToRandom","arrayToSort","i","nextNum","Math","floor","random","BubbleSort","swappedOnCurrentIter","placeholder","newArray","UpdateBarChart","currentArray","setState","labels","datasets","label","data","backgroundColor","chartReference","changeData","printArray","placeholderArray","holdingArray","console","log","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar'\nimport Chart from './components/BarChart';\nimport GoogleChart from './components/GoogleChart';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData : {}  \n    };\n  };\n\n  UNSAFE_componentWillMount(){\n    this.getChartData();\n  }\n\n  ResetToRandom(){\n    let arrayToSort = [500];\n    for(let i=0; i<500; i++){\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n    return arrayToSort;\n  }\n\n BubbleSort(arrayToSort){\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n     for (let i=1; i<500; i++){\n         if(newArray[i-1]>newArray[i]){\n            placeholder = newArray[i-1];\n            newArray[i-1] = newArray[i];\n            newArray[i] = placeholder;\n            swappedOnCurrentIter = true; \n         }\n    }\n    if(swappedOnCurrentIter === true){\n      this.UpdateBarChart(newArray);\n      this.BubbleSort(newArray);\n    }\n    else{\n        return arrayToSort;\n    }\n  }\n\n  UpdateBarChart(currentArray){\n    //this.state.chartData.datasets[0].data = currentArray; \n    this.setState({\n      chartData: {\n        labels: this.state.chartData.labels, \n        datasets:[\n            {\n                label: \"Updated\",\n                data: currentArray\n            }\n        ],\n        backgroundColor: 'purple', \n    }\n    })\n    //console.log(\"App State Data: \"+ this.state.chartData.datasets[0].data);\n    //this.changeData(this.state.chartData);\n    this.chartReference.changeData(this.state.chartData);\n  \n    //this.chartReference.chartInstance.update();\n    }\n\n  printArray(){\n    data=[\n      ['Year', 'Sales', 'Expenses', 'Profit'],\n      ['2014', 1000, 400, 200],\n      ['2015', 1170, 460, 250],\n      ['2016', 660, 1120, 300],\n      ['2017', 1030, 540, 350],\n    ];\n    return data;\n  }\n\n  getChartData(){\n    let arrayToSort = this.ResetToRandom();\n    let placeholderArray = [];\n    let holdingArray = [500];\n    holdingArray[0] = ['Entries','Columns'];\n    for(let i=1; i<501;i++ ){\n      placeholderArray[0] = \"e\"; \n      placeholderArray[1] = arrayToSort[i];\n      holdingArray[i] = placeholderArray;\n      placeholderArray = [];\n    \n    }\n    console.log(\"Holding array: \", holdingArray);\n    this.setState({ \n      chartData: holdingArray\n    })\n  }\n \n  render(){\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <GoogleChart chartData = {this.state.chartData}/>\n        <button onClick= {() => {this.BubbleSort(this.state.chartData.datasets[0].data)}}>BubbleSortCLick</button>\n        <h3>ChartData.data: </h3> <p>{this.state.chartData}</p>  \n        <h3>Actual Data: </h3> <p></p> \n      </div>\n    );\n    }\n  }\n  export default App;\n\n\n"]},"metadata":{},"sourceType":"module"}