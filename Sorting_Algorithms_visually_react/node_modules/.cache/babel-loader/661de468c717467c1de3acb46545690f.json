{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar';\nimport Chart from './components/BarChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.chartReference = {};\n    this.state = {\n      chartData: {}\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    return arrayToSort;\n  }\n\n  BubbleSort(arrayToSort) {\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n    for (let i = 1; i < 500; i++) {\n      if (newArray[i - 1] > newArray[i]) {\n        placeholder = newArray[i - 1];\n        newArray[i - 1] = newArray[i];\n        newArray[i] = placeholder;\n        swappedOnCurrentIter = true;\n      }\n    }\n\n    if (swappedOnCurrentIter === true) {\n      this.UpdateBarChart(newArray);\n      this.BubbleSort(newArray);\n    } else {\n      return arrayToSort;\n    }\n  }\n\n  UpdateBarChart(currentArray) {\n    //this.state.chartData.datasets[0].data = currentArray; \n    this.setState({\n      chartData: {\n        labels: this.state.chartData.labels,\n        datasets: [{\n          label: \"Updated\",\n          data: currentArray\n        }],\n        backgroundColor: 'purple'\n      }\n    }); //console.log(\"App State Data: \"+ this.state.chartData.datasets[0].data);\n    //this.changeData(this.state.chartData);\n\n    this.chartReference.changeData(this.state.chartData); //this.chartReference.chartInstance.update();\n  }\n\n  printArray() {\n    let array = [\"4\", \"5\", \"6\"];\n    return array;\n  }\n\n  getChartData() {\n    let labels = [500];\n\n    for (let i = 0; i < 500; i++) {\n      labels[i] = '';\n    }\n\n    labels[0] = 'Lowest';\n    labels[495] = 'Highest';\n    let arrayToSort = this.ResetToRandom();\n    this.setState({\n      chartData: {\n        labels: labels,\n        datasets: [{\n          label: \"Entries\",\n          data: arrayToSort\n        }],\n        backgroundColor: 'purple'\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        chartData: this.state.chartData,\n        ref: reference => this.chartReference = reference\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.BubbleSort(this.state.chartData.datasets[0].data);\n        },\n        children: \"BubbleSortCLick\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ChartData.data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.chartData.datasets[0].data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/App.js"],"names":["React","Component","Navbar","Chart","App","constructor","chartReference","state","chartData","UNSAFE_componentWillMount","getChartData","ResetToRandom","arrayToSort","i","nextNum","Math","floor","random","BubbleSort","swappedOnCurrentIter","placeholder","newArray","UpdateBarChart","currentArray","setState","labels","datasets","label","data","backgroundColor","changeData","printArray","array","render","reference"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { Component } from 'react';\nimport Navbar from './components/NavBar'\nimport Chart from './components/BarChart';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData : {}  \n    };\n  };\n\n  UNSAFE_componentWillMount(){\n    this.getChartData();\n  }\n\n  ResetToRandom(){\n    let arrayToSort = [500];\n    for(let i=0; i<500; i++){\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n    return arrayToSort;\n  }\n\n BubbleSort(arrayToSort){\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n     for (let i=1; i<500; i++){\n         if(newArray[i-1]>newArray[i]){\n            placeholder = newArray[i-1];\n            newArray[i-1] = newArray[i];\n            newArray[i] = placeholder;\n            swappedOnCurrentIter = true; \n         }\n    }\n    if(swappedOnCurrentIter === true){\n      this.UpdateBarChart(newArray);\n      this.BubbleSort(newArray);\n    }\n    else{\n        return arrayToSort;\n    }\n  }\n\n  UpdateBarChart(currentArray){\n    //this.state.chartData.datasets[0].data = currentArray; \n    this.setState({\n      chartData: {\n        labels: this.state.chartData.labels, \n        datasets:[\n            {\n                label: \"Updated\",\n                data: currentArray\n            }\n        ],\n        backgroundColor: 'purple', \n    }\n    })\n    //console.log(\"App State Data: \"+ this.state.chartData.datasets[0].data);\n    //this.changeData(this.state.chartData);\n    this.chartReference.changeData(this.state.chartData);\n  \n    //this.chartReference.chartInstance.update();\n    }\n\n  printArray(){\n    let array = [\"4\",\"5\",\"6\"];\n    return array;\n  }\n\n  getChartData(){\n    let labels = [500]\n    for(let i=0; i<500; i++){\n      labels[i] = '';\n    }\n    labels[0] = 'Lowest';\n    labels[495] = 'Highest';\n    let arrayToSort = this.ResetToRandom();\n    this.setState({\n      chartData: {\n        labels: labels, \n        datasets:[\n            {\n                label: \"Entries\",\n                data: arrayToSort\n            }\n        ],\n        backgroundColor: 'purple', \n    }\n    })\n\n    \n  }\n\n\n  chartReference = {};\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Chart chartData = {this.state.chartData} ref={(reference) => this.chartReference = reference}/> \n        \n        <button onClick= {() => {this.BubbleSort(this.state.chartData.datasets[0].data)}}>BubbleSortCLick</button>\n        <h3>ChartData.data</h3> <p>{this.state.chartData.datasets[0].data}</p>\n\n        \n        \n      </div>\n    );\n    }\n  }\n  export default App;\n\n\n"]},"metadata":{},"sourceType":"module"}