{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js\";\nimport * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.state = {\n      arrayToSort: props.arrayToSort,\n      chartData: props.chartData\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    return arrayToSort;\n  }\n\n  BubbleSort(passedArrayToSort) {\n    let arrayToSort = passedArrayToSort;\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n    for (let i = 1; i < 500; i++) {\n      if (newArray[i - 1] > newArray[i]) {\n        placeholder = newArray[i - 1];\n        newArray[i - 1] = newArray[i];\n        newArray[i] = placeholder;\n        swappedOnCurrentIter = true;\n      }\n    }\n\n    if (swappedOnCurrentIter === true) {\n      this.UpdateBarChart(newArray);\n      setTimeout(() => {\n        console.log('Hello, World!');\n        this.BubbleSort(newArray);\n      }, 100);\n    } else {\n      return arrayToSort;\n    }\n  } //   timeout(ms) { //pass a time in milliseconds to this function\n  //     return new Promise(resolve => setTimeout(resolve, ms));\n  // }\n\n\n  UpdateBarChart(currentArray) {\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray);\n    this.setState({\n      arrayToSort: currentArray,\n      chartData: displayArray\n    });\n  }\n\n  getChartData() {\n    let arrayToSort = this.ResetToRandom();\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n    this.setState({\n      arrayToSort: arrayToSort,\n      chartData: displayArray\n    });\n  }\n\n  CreateDisplayArrayFromArrayToSort(arrayToSort) {\n    let placeholderArray = [];\n    let holdingArray = [500];\n    holdingArray[0] = ['0-500', 'Entry Value', {\n      role: 'style'\n    }];\n\n    for (let i = 1; i < 501; i++) {\n      placeholderArray[0] = i;\n      placeholderArray[1] = arrayToSort[i];\n      placeholderArray[2] = '#b87333';\n      holdingArray[i] = placeholderArray;\n      placeholderArray = [];\n    }\n\n    return holdingArray;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-pretty-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(Chart, {\n        width: '1200px',\n        height: '400px',\n        chartType: \"Bar\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 23\n        }, this),\n        data: this.state.chartData,\n        options: {\n          // Material design options\n          chart: {\n            title: 'Randomized Data',\n            subtitle: 'Select a sort button to sort the data visually.'\n          }\n        } // For tests\n        ,\n        rootProps: {\n          'data-testid': '2'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"BubbleSortCLick\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default GoogleChart;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js"],"names":["React","Chart","GoogleChart","Component","constructor","props","chartReference","createRef","state","arrayToSort","chartData","UNSAFE_componentWillMount","getChartData","ResetToRandom","i","nextNum","Math","floor","random","BubbleSort","passedArrayToSort","swappedOnCurrentIter","placeholder","newArray","UpdateBarChart","setTimeout","console","log","currentArray","displayArray","CreateDisplayArrayFromArrayToSort","setState","placeholderArray","holdingArray","role","render","chart","title","subtitle"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n\nclass GoogleChart extends React.Component{\n    constructor(props){\n        super(props);\n        this.chartReference = React.createRef();\n        this.state = {\n            arrayToSort: props.arrayToSort,\n            chartData: props.chartData\n        }\n\n    }\n    UNSAFE_componentWillMount(){\n        this.getChartData();\n      }\n    \n    ResetToRandom(){\n        let arrayToSort = [500];\n        for(let i=0; i<500; i++){\n          let nextNum = Math.floor(Math.random() * 1000);\n          arrayToSort[i] = nextNum;\n        }\n        return arrayToSort;\n      }\n    \n     BubbleSort(passedArrayToSort){\n        let arrayToSort = passedArrayToSort\n        var swappedOnCurrentIter = false;\n        var placeholder;\n        let newArray = arrayToSort;\n    \n         for (let i=1; i<500; i++){\n             if(newArray[i-1]>newArray[i]){\n                placeholder = newArray[i-1];\n                newArray[i-1] = newArray[i];\n                newArray[i] = placeholder;\n                swappedOnCurrentIter = true; \n             }\n        }\n        if(swappedOnCurrentIter === true){\n          this.UpdateBarChart(newArray);\n          setTimeout(() => {\n            console.log('Hello, World!')\n            this.BubbleSort(newArray);\n          }, 100);\n          \n          \n        }\n        else{\n            return arrayToSort;\n        }\n      }\n\n    //   timeout(ms) { //pass a time in milliseconds to this function\n    //     return new Promise(resolve => setTimeout(resolve, ms));\n    // }\n      UpdateBarChart(currentArray){\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray); \n        this.setState({\n            arrayToSort : currentArray,\n            chartData: displayArray\n          })\n    }    \n    \n      getChartData(){\n        let arrayToSort = this.ResetToRandom();\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n        this.setState({ \n          arrayToSort: arrayToSort,\n          chartData: displayArray\n        })\n      }\n    \n      CreateDisplayArrayFromArrayToSort(arrayToSort){\n        let placeholderArray = [];\n        let holdingArray = [500];\n        holdingArray[0] = ['0-500','Entry Value', { role: 'style' }];\n        for(let i=1; i<501;i++ ){\n          placeholderArray[0] = i; \n          placeholderArray[1] = arrayToSort[i];\n          placeholderArray[2] = '#b87333'\n          holdingArray[i] = placeholderArray;\n          placeholderArray = [];\n        \n        }\n        return holdingArray;\n      }\n    \n    render() {\n        return (\n          <div className={\"my-pretty-chart-container\"}>\n            <Chart\n              width={'1200px'}\n              height={'400px'}\n              chartType=\"Bar\"\n              loader={<div>Loading Chart</div>}\n              data={\n                this.state.chartData\n              }\n              options={{\n                // Material design options\n                chart: {\n                  title: 'Randomized Data',\n                  subtitle: 'Select a sort button to sort the data visually.',\n                },\n              }}\n              // For tests\n              rootProps={{ 'data-testid': '2' }}\n            />\n            <button onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>BubbleSortCLick</button>\n          </div>\n        );\n      }\n}export default GoogleChart;"]},"metadata":{},"sourceType":"module"}