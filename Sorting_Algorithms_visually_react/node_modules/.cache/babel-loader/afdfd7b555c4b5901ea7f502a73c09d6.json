{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js\";\nimport * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.state = {\n      arrayToSort: props.arrayToSort,\n      chartData: props.chartData\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    return arrayToSort;\n  }\n\n  ResetOnclick() {\n    let newRandomArray = this.ResetToRandom();\n    this.UpdateBarChart(newRandomArray);\n  }\n\n  BubbleSort(passedArrayToSort) {\n    let arrayToSort = passedArrayToSort;\n    var swappedOnCurrentIter = false;\n    var placeholder;\n    let newArray = arrayToSort;\n\n    for (let i = 1; i < 500; i++) {\n      if (newArray[i - 1] > newArray[i]) {\n        placeholder = newArray[i - 1];\n        newArray[i - 1] = newArray[i];\n        newArray[i] = placeholder;\n        swappedOnCurrentIter = true;\n      }\n    }\n\n    if (swappedOnCurrentIter === true) {\n      this.UpdateBarChart(newArray);\n      setTimeout(() => {\n        console.log('Hello, World!');\n        this.BubbleSort(newArray);\n      }, 1);\n    } else {\n      return arrayToSort;\n    }\n  }\n\n  HeapSort(arrayToSort) {\n    let length_of_heap = arrayToSort.length;\n    this.Heapify;\n  }\n\n  Heapify(arrayToSort, lengthToSort) {\n    let currentParent;\n    let currentChildLeft;\n    let currentChildRight;\n    let didSwap = false;\n\n    for (let i = 0; i < lengthToSort; i++) {\n      currentParent = arrayToSort[i];\n      currentChildLeft = 0;\n      currentChildRight = 0;\n\n      if (2 * i + 2 <= lengthToSort) {\n        currentChildLeft = [2 * i + 1];\n        currentChildRight = [2 * i + 2];\n        didSwap = true;\n      } else if (2 * i + 1 <= lengthToSort) {\n        currentChildLeft = [2 * i + 1];\n        didSwap = true;\n      }\n\n      if (currentChildLeft == 0) {\n        if (currentChildLeft > currentParent) {\n          arrayToSort[i] = currentChildLeft;\n          arrayToSort[2 * i + 1] = currentParent;\n        } else if (currentChildRight > currentParent) {\n          arrayToSort[i] = currentChildLeft;\n          arrayToSort[2 * i + 2] = currentParent;\n        }\n      }\n    }\n\n    let placeholderNode = arrayToSort[0];\n    arrayToSort[0] = arrayToSort[lengthToSort];\n    arrayToSort[lengthToSort] = placeholderNode;\n    return arrayToSort, lengthToSort - 1;\n  }\n\n  UpdateBarChart(currentArray) {\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray);\n    this.setState({\n      arrayToSort: currentArray,\n      chartData: displayArray\n    });\n  }\n\n  getChartData() {\n    let arrayToSort = this.ResetToRandom();\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n    this.setState({\n      arrayToSort: arrayToSort,\n      chartData: displayArray\n    });\n  }\n\n  CreateDisplayArrayFromArrayToSort(arrayToSort) {\n    let placeholderArray = [];\n    let holdingArray = [500];\n    holdingArray[0] = ['0-500', 'Entry Value'];\n\n    for (let i = 1; i < 501; i++) {\n      placeholderArray[0] = i;\n      placeholderArray[1] = arrayToSort[i];\n      holdingArray[i] = placeholderArray;\n      placeholderArray = [];\n    }\n\n    return holdingArray;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-pretty-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.ResetOnclick();\n        },\n        children: \"Reset Data To Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        width: '1400px',\n        height: '500px',\n        chartType: \"Bar\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 23\n        }, this),\n        data: this.state.chartData,\n        options: {\n          // Material design options\n          chart: {\n            title: 'Randomized Data',\n            subtitle: 'Select a sort button to sort the data visually.' //backgroundColor: 'red',\n\n          },\n          colors: ['#7509b0']\n        } // For tests\n        ,\n        rootProps: {\n          'data-testid': '2'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Insert Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default GoogleChart;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js"],"names":["React","Chart","GoogleChart","Component","constructor","props","chartReference","createRef","state","arrayToSort","chartData","UNSAFE_componentWillMount","getChartData","ResetToRandom","i","nextNum","Math","floor","random","ResetOnclick","newRandomArray","UpdateBarChart","BubbleSort","passedArrayToSort","swappedOnCurrentIter","placeholder","newArray","setTimeout","console","log","HeapSort","length_of_heap","length","Heapify","lengthToSort","currentParent","currentChildLeft","currentChildRight","didSwap","placeholderNode","currentArray","displayArray","CreateDisplayArrayFromArrayToSort","setState","placeholderArray","holdingArray","render","chart","title","subtitle","colors"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n\nclass GoogleChart extends React.Component{\n    constructor(props){\n        super(props);\n        this.chartReference = React.createRef();\n        this.state = {\n            arrayToSort: props.arrayToSort,\n            chartData: props.chartData\n        }\n\n    }\n    UNSAFE_componentWillMount(){\n        this.getChartData();\n      }\n    \n    ResetToRandom(){\n        let arrayToSort = [500];\n        for(let i=0; i<500; i++){\n          let nextNum = Math.floor(Math.random() * 1000);\n          arrayToSort[i] = nextNum;\n        }\n        return arrayToSort;\n      }\n    \n    ResetOnclick(){\n        let newRandomArray = this.ResetToRandom();\n        this.UpdateBarChart(newRandomArray);\n    }\n    \n     BubbleSort(passedArrayToSort){\n        let arrayToSort = passedArrayToSort\n        var swappedOnCurrentIter = false;\n        var placeholder;\n        let newArray = arrayToSort;\n    \n         for (let i=1; i<500; i++){\n             if(newArray[i-1]>newArray[i]){\n                placeholder = newArray[i-1];\n                newArray[i-1] = newArray[i];\n                newArray[i] = placeholder;\n                swappedOnCurrentIter = true; \n             }\n        }\n        if(swappedOnCurrentIter === true){\n          this.UpdateBarChart(newArray);\n          setTimeout(() => {\n            console.log('Hello, World!')\n            this.BubbleSort(newArray);\n          }, 1);\n          \n          \n        }\n        else{\n            return arrayToSort;\n        }\n      }\n\n      HeapSort(arrayToSort){\n        let length_of_heap = arrayToSort.length;\n        this.Heapify\n\n      }\n\n      Heapify(arrayToSort, lengthToSort){\n            let currentParent;\n            let currentChildLeft;\n            let currentChildRight;\n            let didSwap = false;\n            for (let i=0; i < lengthToSort; i++){\n                currentParent = arrayToSort[i];\n                currentChildLeft = 0;\n                currentChildRight = 0;\n                if(2*i+2 <= lengthToSort){\n                    currentChildLeft = [2*i + 1];\n                    currentChildRight = [2*i + 2];\n                    didSwap = true;\n                }\n                else if(2*i+1 <= lengthToSort){\n                    currentChildLeft = [2*i + 1];\n                    didSwap = true;\n                }\n                if(currentChildLeft == 0){\n                    if(currentChildLeft>currentParent){\n                        arrayToSort[i] = currentChildLeft;\n                        arrayToSort[2*i + 1] = currentParent;\n                    }else if(currentChildRight > currentParent){\n                        arrayToSort[i] = currentChildLeft;\n                        arrayToSort[2*i + 2] = currentParent;\n                    }\n                }\n            }\n            let placeholderNode = arrayToSort[0];\n            arrayToSort[0] = arrayToSort[lengthToSort]\n            arrayToSort[lengthToSort] = placeholderNode;\n            return arrayToSort, lengthToSort-1;\n      }\n\n\n      UpdateBarChart(currentArray){\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray); \n        this.setState({\n            arrayToSort : currentArray,\n            chartData: displayArray\n          })\n    }    \n    \n      getChartData(){\n        let arrayToSort = this.ResetToRandom();\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n        this.setState({ \n          arrayToSort: arrayToSort,\n          chartData: displayArray\n        })\n      }\n    \n      CreateDisplayArrayFromArrayToSort(arrayToSort){\n        let placeholderArray = [];\n        let holdingArray = [500];\n        holdingArray[0] = ['0-500','Entry Value'];\n        for(let i=1; i<501;i++ ){\n          placeholderArray[0] = i; \n          placeholderArray[1] = arrayToSort[i];\n        \n          holdingArray[i] = placeholderArray;\n          placeholderArray = [];\n        \n        }\n        return holdingArray;\n      }\n    \n    render() {\n        return (\n          <div className={\"my-pretty-chart-container\"}>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.ResetOnclick()}}>Reset Data To Random</button>\n            <Chart\n              width={'1400px'}\n              height={'500px'}\n              chartType=\"Bar\"\n              loader={<div>Loading Chart</div>}\n              data={\n                this.state.chartData\n              }\n              options={{\n                // Material design options\n                chart: {\n                  title: 'Randomized Data',\n                  subtitle: 'Select a sort button to sort the data visually.',\n                  //backgroundColor: 'red',\n                },\n                colors: ['#7509b0'],\n              }}\n              // For tests\n              rootProps={{ 'data-testid': '2' }}\n            />\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Bubble Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Merge Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Quick Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Insert Sort</button>\n          </div>\n        );\n      }\n}export default GoogleChart;"]},"metadata":{},"sourceType":"module"}