{"ast":null,"code":"var _jsxFileName = \"/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js\";\nimport * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.BubbleSort = passedArrayToSort => {\n      let arrayToSort = passedArrayToSort;\n      console.log(\"bubble: \", arrayToSort);\n      var swappedOnCurrentIter = false;\n      var placeholder;\n      let newArray = arrayToSort;\n\n      for (let i = 1; i < 500; i++) {\n        if (newArray[i - 1] > newArray[i]) {\n          placeholder = newArray[i - 1];\n          newArray[i - 1] = newArray[i];\n          newArray[i] = placeholder;\n          swappedOnCurrentIter = true;\n        }\n      }\n\n      if (swappedOnCurrentIter === true) {\n        this.UpdateBarChart(newArray);\n        setTimeout(() => {\n          console.log('Hello, World!');\n          this.BubbleSort(newArray);\n        }, 1);\n      } else {\n        return arrayToSort;\n      }\n    };\n\n    this.HeapSort = passedArrayToSort => {\n      console.log(\"HEAPSORT: \", passedArrayToSort);\n      var length_of_heap = 500;\n      let sortedArray = this.Heapify(passedArrayToSort, length_of_heap);\n      return sortedArray;\n    };\n\n    this.chartReference = /*#__PURE__*/React.createRef();\n    this.state = {\n      arrayToSort: props.arrayToSort,\n      chartData: props.chartData\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getChartData();\n  }\n\n  ResetToRandom() {\n    let arrayToSort = [500];\n\n    for (let i = 0; i < 500; i++) {\n      let nextNum = Math.floor(Math.random() * 1000);\n      arrayToSort[i] = nextNum;\n    }\n\n    console.log(\"START\", arrayToSort);\n    return arrayToSort;\n  }\n\n  ResetOnclick() {\n    let newRandomArray = this.ResetToRandom();\n    this.UpdateBarChart(newRandomArray);\n  }\n\n  Heapify(arrayToSort, lengthToSort) {\n    console.log(\"HEAPify: \", arrayToSort);\n    var heap = arrayToSort;\n    var currentParent;\n    var currentChildLeft;\n    var currentChildRight;\n    var didSwap = false;\n    var placeholderNode;\n    console.log(heap);\n\n    for (let i = 1; i < lengthToSort; i++) {\n      currentParent = heap[i];\n      currentChildLeft = 0;\n      currentChildRight = 0;\n\n      if (2 * i + 2 <= lengthToSort) {\n        currentChildLeft = heap[2 * i + 1];\n        currentChildRight = heap[2 * i + 2];\n        didSwap = true;\n      } else if (2 * i + 1 <= lengthToSort) {\n        currentChildLeft = [2 * i + 1];\n        didSwap = true;\n      }\n\n      if (currentChildLeft == 0) {\n        if (currentChildLeft > currentParent) {\n          heap[i] = currentChildLeft;\n          heap[2 * i + 1] = currentParent;\n        } else if (currentChildRight > currentParent) {\n          heap[i] = currentChildLeft;\n          heap[2 * i + 2] = currentParent;\n        }\n      }\n    }\n\n    placeholderNode = heap[0];\n    heap[0] = heap[lengthToSort];\n    heap[lengthToSort] = placeholderNode;\n\n    if (didSwap) {\n      let newLength = lengthToSort - 1;\n      this.Heapify(heap, newLength);\n    } else {\n      return heap;\n    }\n  }\n\n  UpdateBarChart(currentArray) {\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray);\n    this.setState({\n      arrayToSort: currentArray,\n      chartData: displayArray\n    });\n  }\n\n  getChartData() {\n    let arrayToSort = this.ResetToRandom();\n    let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n    this.setState({\n      arrayToSort: arrayToSort,\n      chartData: displayArray\n    });\n  }\n\n  CreateDisplayArrayFromArrayToSort(arrayToSort) {\n    let placeholderArray = [];\n    let holdingArray = [500];\n    holdingArray[0] = ['0-500', 'Entry Value'];\n\n    for (let i = 1; i < 501; i++) {\n      placeholderArray[0] = i;\n      placeholderArray[1] = arrayToSort[i];\n      holdingArray[i] = placeholderArray;\n      placeholderArray = [];\n    }\n\n    return holdingArray;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-pretty-chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.ResetOnclick();\n        },\n        children: \"Reset Data To Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        width: '1400px',\n        height: '500px',\n        chartType: \"Bar\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 23\n        }, this),\n        data: this.state.chartData,\n        options: {\n          // Material design options\n          chart: {\n            title: 'Randomized Data',\n            subtitle: 'Select a sort button to sort the data visually.' //backgroundColor: 'red',\n\n          },\n          colors: ['#7509b0']\n        } // For tests\n        ,\n        rootProps: {\n          'data-testid': '2'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.HeapSort(this.state.arrayToSort);\n        },\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-1\",\n        role: \"button\",\n        onClick: () => {\n          this.BubbleSort(this.state.arrayToSort);\n        },\n        children: \"Insert Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default GoogleChart;","map":{"version":3,"sources":["/Users/sambannister/Documents/Projects/react-sorting-app/src/components/GoogleChart.js"],"names":["React","Chart","GoogleChart","Component","constructor","props","BubbleSort","passedArrayToSort","arrayToSort","console","log","swappedOnCurrentIter","placeholder","newArray","i","UpdateBarChart","setTimeout","HeapSort","length_of_heap","sortedArray","Heapify","chartReference","createRef","state","chartData","UNSAFE_componentWillMount","getChartData","ResetToRandom","nextNum","Math","floor","random","ResetOnclick","newRandomArray","lengthToSort","heap","currentParent","currentChildLeft","currentChildRight","didSwap","placeholderNode","newLength","currentArray","displayArray","CreateDisplayArrayFromArrayToSort","setState","placeholderArray","holdingArray","render","chart","title","subtitle","colors"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,qBAAtB;;;AAGA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SA4BjBC,UA5BiB,GA4BHC,iBAAD,IAAsB;AAChC,UAAIC,WAAW,GAAGD,iBAAlB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,WAAxB;AACA,UAAIG,oBAAoB,GAAG,KAA3B;AACA,UAAIC,WAAJ;AACA,UAAIC,QAAQ,GAAGL,WAAf;;AAEC,WAAK,IAAIM,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,GAAhB,EAAqBA,CAAC,EAAtB,EAAyB;AACrB,YAAGD,QAAQ,CAACC,CAAC,GAAC,CAAH,CAAR,GAAcD,QAAQ,CAACC,CAAD,CAAzB,EAA6B;AAC1BF,UAAAA,WAAW,GAAGC,QAAQ,CAACC,CAAC,GAAC,CAAH,CAAtB;AACAD,UAAAA,QAAQ,CAACC,CAAC,GAAC,CAAH,CAAR,GAAgBD,QAAQ,CAACC,CAAD,CAAxB;AACAD,UAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,WAAd;AACAD,UAAAA,oBAAoB,GAAG,IAAvB;AACF;AACL;;AACD,UAAGA,oBAAoB,KAAK,IAA5B,EAAiC;AAC/B,aAAKI,cAAL,CAAoBF,QAApB;AACAG,QAAAA,UAAU,CAAC,MAAM;AACfP,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,eAAKJ,UAAL,CAAgBO,QAAhB;AACD,SAHS,EAGP,CAHO,CAAV;AAMD,OARD,MASI;AACA,eAAOL,WAAP;AACH;AACF,KAvDe;;AAAA,SAyDhBS,QAzDgB,GAyDJV,iBAAD,IAAsB;AAC/BE,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBH,iBAAzB;AACA,UAAIW,cAAc,GAAG,GAArB;AACA,UAAIC,WAAW,GAAG,KAAKC,OAAL,CAAab,iBAAb,EAAgCW,cAAhC,CAAlB;AACA,aAAOC,WAAP;AACD,KA9De;;AAEd,SAAKE,cAAL,gBAAsBrB,KAAK,CAACsB,SAAN,EAAtB;AACA,SAAKC,KAAL,GAAa;AACTf,MAAAA,WAAW,EAAEH,KAAK,CAACG,WADV;AAETgB,MAAAA,SAAS,EAAEnB,KAAK,CAACmB;AAFR,KAAb;AAKH;;AACDC,EAAAA,yBAAyB,GAAE;AACvB,SAAKC,YAAL;AACD;;AAEHC,EAAAA,aAAa,GAAE;AACX,QAAInB,WAAW,GAAG,CAAC,GAAD,CAAlB;;AACA,SAAI,IAAIM,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,GAAf,EAAoBA,CAAC,EAArB,EAAwB;AACtB,UAAIc,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAAd;AACAvB,MAAAA,WAAW,CAACM,CAAD,CAAX,GAAiBc,OAAjB;AACD;;AACDnB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,WAArB;AACA,WAAOA,WAAP;AACD;;AAEHwB,EAAAA,YAAY,GAAE;AACV,QAAIC,cAAc,GAAG,KAAKN,aAAL,EAArB;AACA,SAAKZ,cAAL,CAAoBkB,cAApB;AACH;;AAsCCb,EAAAA,OAAO,CAACZ,WAAD,EAAc0B,YAAd,EAA2B;AAC5BzB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBF,WAAxB;AACA,QAAI2B,IAAI,GAAG3B,WAAX;AACA,QAAI4B,aAAJ;AACA,QAAIC,gBAAJ;AACA,QAAIC,iBAAJ;AACA,QAAIC,OAAO,GAAG,KAAd;AACA,QAAIC,eAAJ;AACA/B,IAAAA,OAAO,CAACC,GAAR,CAAYyB,IAAZ;;AACA,SAAK,IAAIrB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGoB,YAAlB,EAAgCpB,CAAC,EAAjC,EAAoC;AAChCsB,MAAAA,aAAa,GAAGD,IAAI,CAACrB,CAAD,CAApB;AACAuB,MAAAA,gBAAgB,GAAG,CAAnB;AACAC,MAAAA,iBAAiB,GAAG,CAApB;;AACA,UAAG,IAAExB,CAAF,GAAI,CAAJ,IAASoB,YAAZ,EAAyB;AACrBG,QAAAA,gBAAgB,GAAGF,IAAI,CAAC,IAAErB,CAAF,GAAM,CAAP,CAAvB;AACAwB,QAAAA,iBAAiB,GAAGH,IAAI,CAAC,IAAErB,CAAF,GAAM,CAAP,CAAxB;AACAyB,QAAAA,OAAO,GAAG,IAAV;AACH,OAJD,MAKK,IAAG,IAAEzB,CAAF,GAAI,CAAJ,IAASoB,YAAZ,EAAyB;AAC1BG,QAAAA,gBAAgB,GAAG,CAAC,IAAEvB,CAAF,GAAM,CAAP,CAAnB;AACAyB,QAAAA,OAAO,GAAG,IAAV;AACH;;AACD,UAAGF,gBAAgB,IAAI,CAAvB,EAAyB;AACrB,YAAGA,gBAAgB,GAACD,aAApB,EAAkC;AAC9BD,UAAAA,IAAI,CAACrB,CAAD,CAAJ,GAAUuB,gBAAV;AACAF,UAAAA,IAAI,CAAC,IAAErB,CAAF,GAAM,CAAP,CAAJ,GAAgBsB,aAAhB;AACH,SAHD,MAGM,IAAGE,iBAAiB,GAAGF,aAAvB,EAAqC;AACvCD,UAAAA,IAAI,CAACrB,CAAD,CAAJ,GAAUuB,gBAAV;AACAF,UAAAA,IAAI,CAAC,IAAErB,CAAF,GAAM,CAAP,CAAJ,GAAgBsB,aAAhB;AACH;AACJ;AACJ;;AAEDI,IAAAA,eAAe,GAAGL,IAAI,CAAC,CAAD,CAAtB;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAACD,YAAD,CAAd;AACAC,IAAAA,IAAI,CAACD,YAAD,CAAJ,GAAqBM,eAArB;;AACA,QAAGD,OAAH,EAAW;AACT,UAAIE,SAAS,GAAGP,YAAY,GAAG,CAA/B;AACA,WAAKd,OAAL,CAAae,IAAb,EAAmBM,SAAnB;AACD,KAHD,MAII;AACF,aAAON,IAAP;AACD;AAEN;;AAGDpB,EAAAA,cAAc,CAAC2B,YAAD,EAAc;AAC1B,QAAIC,YAAY,GAAG,KAAKC,iCAAL,CAAuCF,YAAvC,CAAnB;AACA,SAAKG,QAAL,CAAc;AACVrC,MAAAA,WAAW,EAAGkC,YADJ;AAEVlB,MAAAA,SAAS,EAAEmB;AAFD,KAAd;AAIH;;AAECjB,EAAAA,YAAY,GAAE;AACZ,QAAIlB,WAAW,GAAG,KAAKmB,aAAL,EAAlB;AACA,QAAIgB,YAAY,GAAG,KAAKC,iCAAL,CAAuCpC,WAAvC,CAAnB;AACA,SAAKqC,QAAL,CAAc;AACZrC,MAAAA,WAAW,EAAEA,WADD;AAEZgB,MAAAA,SAAS,EAAEmB;AAFC,KAAd;AAID;;AAEDC,EAAAA,iCAAiC,CAACpC,WAAD,EAAa;AAC5C,QAAIsC,gBAAgB,GAAG,EAAvB;AACA,QAAIC,YAAY,GAAG,CAAC,GAAD,CAAnB;AACAA,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAC,OAAD,EAAS,aAAT,CAAlB;;AACA,SAAI,IAAIjC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,GAAf,EAAmBA,CAAC,EAApB,EAAwB;AACtBgC,MAAAA,gBAAgB,CAAC,CAAD,CAAhB,GAAsBhC,CAAtB;AACAgC,MAAAA,gBAAgB,CAAC,CAAD,CAAhB,GAAsBtC,WAAW,CAACM,CAAD,CAAjC;AAEAiC,MAAAA,YAAY,CAACjC,CAAD,CAAZ,GAAkBgC,gBAAlB;AACAA,MAAAA,gBAAgB,GAAG,EAAnB;AAED;;AACD,WAAOC,YAAP;AACD;;AAEHC,EAAAA,MAAM,GAAG;AACL,wBACE;AAAK,MAAA,SAAS,EAAE,2BAAhB;AAAA,8BACE;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,IAAI,EAAC,QAA9B;AAAuC,QAAA,OAAO,EAAG,MAAM;AAAC,eAAKhB,YAAL;AAAoB,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,KAAK,EAAE,QADT;AAEE,QAAA,MAAM,EAAE,OAFV;AAGE,QAAA,SAAS,EAAC,KAHZ;AAIE,QAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJV;AAKE,QAAA,IAAI,EACF,KAAKT,KAAL,CAAWC,SANf;AAQE,QAAA,OAAO,EAAE;AACP;AACAyB,UAAAA,KAAK,EAAE;AACLC,YAAAA,KAAK,EAAE,iBADF;AAELC,YAAAA,QAAQ,EAAE,iDAFL,CAGL;;AAHK,WAFA;AAOPC,UAAAA,MAAM,EAAE,CAAC,SAAD;AAPD,SARX,CAiBE;AAjBF;AAkBE,QAAA,SAAS,EAAE;AAAE,yBAAe;AAAjB;AAlBb;AAAA;AAAA;AAAA;AAAA,cAFF,eAsBE;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,IAAI,EAAC,QAA9B;AAAuC,QAAA,OAAO,EAAG,MAAM;AAAC,eAAK9C,UAAL,CAAgB,KAAKiB,KAAL,CAAWf,WAA3B;AAAwC,SAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF,eAuBE;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,IAAI,EAAC,QAA9B;AAAuC,QAAA,OAAO,EAAG,MAAM;AAAC,eAAKS,QAAL,CAAc,KAAKM,KAAL,CAAWf,WAAzB;AAAsC,SAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF,eAwBE;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,IAAI,EAAC,QAA9B;AAAuC,QAAA,OAAO,EAAG,MAAM;AAAC,eAAKF,UAAL,CAAgB,KAAKiB,KAAL,CAAWf,WAA3B;AAAwC,SAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBF,eAyBE;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,IAAI,EAAC,QAA9B;AAAuC,QAAA,OAAO,EAAG,MAAM;AAAC,eAAKF,UAAL,CAAgB,KAAKiB,KAAL,CAAWf,WAA3B;AAAwC,SAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA6BD;;AA9KkC;;AA+KxC,eAAeN,WAAf","sourcesContent":["import * as React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\n\nclass GoogleChart extends React.Component{\n    constructor(props){\n        super(props);\n        this.chartReference = React.createRef();\n        this.state = {\n            arrayToSort: props.arrayToSort,\n            chartData: props.chartData\n        }\n\n    }\n    UNSAFE_componentWillMount(){\n        this.getChartData();\n      }\n    \n    ResetToRandom(){\n        let arrayToSort = [500];\n        for(let i=0; i<500; i++){\n          let nextNum = Math.floor(Math.random() * 1000);\n          arrayToSort[i] = nextNum;\n        }\n        console.log(\"START\", arrayToSort);\n        return arrayToSort;\n      }\n    \n    ResetOnclick(){\n        let newRandomArray = this.ResetToRandom();\n        this.UpdateBarChart(newRandomArray);\n    }\n    \n     BubbleSort = (passedArrayToSort) =>{\n        let arrayToSort = passedArrayToSort;\n        console.log(\"bubble: \", arrayToSort)\n        var swappedOnCurrentIter = false;\n        var placeholder;\n        let newArray = arrayToSort;\n    \n         for (let i=1; i<500; i++){\n             if(newArray[i-1]>newArray[i]){\n                placeholder = newArray[i-1];\n                newArray[i-1] = newArray[i];\n                newArray[i] = placeholder;\n                swappedOnCurrentIter = true; \n             }\n        }\n        if(swappedOnCurrentIter === true){\n          this.UpdateBarChart(newArray);\n          setTimeout(() => {\n            console.log('Hello, World!')\n            this.BubbleSort(newArray);\n          }, 1);\n          \n          \n        }\n        else{\n            return arrayToSort;\n        }\n      }\n\n      HeapSort = (passedArrayToSort) =>{\n        console.log(\"HEAPSORT: \",passedArrayToSort);\n        var length_of_heap = 500;\n        let sortedArray = this.Heapify(passedArrayToSort, length_of_heap);\n        return sortedArray\n      }\n\n      Heapify(arrayToSort, lengthToSort){\n            console.log(\"HEAPify: \",arrayToSort);\n            var heap = arrayToSort;\n            var currentParent;\n            var currentChildLeft;\n            var currentChildRight;\n            var didSwap = false;\n            var placeholderNode;\n            console.log(heap);\n            for (let i=1; i < lengthToSort; i++){\n                currentParent = heap[i];\n                currentChildLeft = 0;\n                currentChildRight = 0;\n                if(2*i+2 <= lengthToSort){\n                    currentChildLeft = heap[2*i + 1];\n                    currentChildRight = heap[2*i + 2];\n                    didSwap = true;\n                }\n                else if(2*i+1 <= lengthToSort){\n                    currentChildLeft = [2*i + 1];\n                    didSwap = true;\n                }\n                if(currentChildLeft == 0){\n                    if(currentChildLeft>currentParent){\n                        heap[i] = currentChildLeft;\n                        heap[2*i + 1] = currentParent;\n                    }else if(currentChildRight > currentParent){\n                        heap[i] = currentChildLeft;\n                        heap[2*i + 2] = currentParent;\n                    }\n                }\n            }\n            \n            placeholderNode = heap[0];\n            heap[0] = heap[lengthToSort]\n            heap[lengthToSort] = placeholderNode;\n            if(didSwap){\n              let newLength = lengthToSort - 1;\n              this.Heapify(heap, newLength);\n            }\n            else{\n              return heap;\n            }\n            \n      }\n\n\n      UpdateBarChart(currentArray){\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(currentArray); \n        this.setState({\n            arrayToSort : currentArray,\n            chartData: displayArray\n          })\n    }    \n    \n      getChartData(){\n        let arrayToSort = this.ResetToRandom();\n        let displayArray = this.CreateDisplayArrayFromArrayToSort(arrayToSort);\n        this.setState({ \n          arrayToSort: arrayToSort,\n          chartData: displayArray\n        })\n      }\n    \n      CreateDisplayArrayFromArrayToSort(arrayToSort){\n        let placeholderArray = [];\n        let holdingArray = [500];\n        holdingArray[0] = ['0-500','Entry Value'];\n        for(let i=1; i<501;i++ ){\n          placeholderArray[0] = i; \n          placeholderArray[1] = arrayToSort[i];\n        \n          holdingArray[i] = placeholderArray;\n          placeholderArray = [];\n        \n        }\n        return holdingArray;\n      }\n    \n    render() {\n        return (\n          <div className={\"my-pretty-chart-container\"}>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.ResetOnclick()}}>Reset Data To Random</button>\n            <Chart\n              width={'1400px'}\n              height={'500px'}\n              chartType=\"Bar\"\n              loader={<div>Loading Chart</div>}\n              data={\n                this.state.chartData\n              }\n              options={{\n                // Material design options\n                chart: {\n                  title: 'Randomized Data',\n                  subtitle: 'Select a sort button to sort the data visually.',\n                  //backgroundColor: 'red',\n                },\n                colors: ['#7509b0'],\n              }}\n              // For tests\n              rootProps={{ 'data-testid': '2' }}\n            />\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Bubble Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.HeapSort(this.state.arrayToSort)}}>Heap Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Quick Sort</button>\n            <button class=\"button-1\" role=\"button\" onClick= {() => {this.BubbleSort(this.state.arrayToSort)}}>Insert Sort</button>\n          </div>\n        );\n      }\n}export default GoogleChart;"]},"metadata":{},"sourceType":"module"}